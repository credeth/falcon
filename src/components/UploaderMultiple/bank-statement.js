import React from "react";
import { Alert, Form, Input, Tooltip, Select, Button, Radio } from "antd";
import { CustomSelect } from "components/uielements";
import Uploader from "./upload-input";
import { each, find } from "lodash";
import { DocumentSubTypesMeta, Banks, TypesSubTypes } from "./models";
import moment from "moment";
class BankStatement extends React.Component {
  state = {
    language: "en",
    addMore: false,
    bank: undefined,
    bankName: undefined,
    password: undefined,
    accountType: undefined
  };
  componentDidMount() {
    const { files = { front: null, back: null, multiples: [] } } = this.props;
    if (files.multiples.length > 0 && !this.state.addMore) {
      this.setState({ addMore: true });
    }
  }

  // componentWillReceiveProps(nextProps) {
  //   const { files = { front: null, back: null, multiples: [] } } = nextProps;
  //   if (files.multiples.length > 0 && !this.state.addMore) {
  //     this.setState({ addMore: true });
  //   }
  // }

  onTypeChange = value => {
    this.props.onTypeChange(value);
  };
  renderDates = () => {
    const { defaultDate } = this.props;
    let date = moment();
    let startDate = moment()
      .startOf("month")
      .subtract(3, "month")
      .format("Do MMM YYYY");
    let endDate = moment()
      .subtract(1, "month")
      .endOf("month")
      .format("Do MMM YYYY");
    if (defaultDate) {
      startDate = moment(defaultDate)
        .startOf("month")
        .subtract(3, "month")
        .format("Do MMM YYYY");
      endDate = moment(defaultDate)
        .subtract(1, "month")
        .endOf("month")
        .format("Do MMM YYYY");
    }
    return (
      <div>
        <p>Start Date: {startDate}</p>
        <p>End Date: {endDate}</p>
      </div>
    );
  };
  render() {
    const {
      files = { front: null, back: null, multiples: [] },
      title,
      description,
      documentType,
      defaultDate,
      removeBtn,
      defaultAccept,
      subType,
      uploadProps,
      form
    } = this.props;
    const { getFieldDecorator } = form;
    let subTypeMeta = null;
    let gridColumns = 2;
    if (subType) {
      subTypeMeta = find(DocumentSubTypesMeta, { Id: subType });
      gridColumns = subTypeMeta.Front && subTypeMeta.Back ? 2 : 1;
      gridColumns =
        gridColumns === 2
          ? gridColumns
          : gridColumns + (subTypeMeta.Multiple ? 1 : 0);
    }

    let types = [];
    let foundSubTypes = TypesSubTypes[documentType];

    if (foundSubTypes) {
      each(foundSubTypes, st =>
        types.push(find(DocumentSubTypesMeta, { Id: st }))
      );
    }
    return (
      <div className="uploader-multiple">
        <div className="details-block">
          {/* <div className="icon">
            <i className="material-icons">description</i>
          </div> */}
          <div className="info">
            <div className="title">{title}</div>
            {subTypeMeta ? (
              <div className="desc">
                {subTypeMeta.Id === 6 ? (
                  <span>
                    <p>
                      Last three ‘3’ months updated Bank{" "}
                      <b>
                        E-Statement{" "}
                        <Tooltip
                          placement="right"
                          title="E-statements are generated by the bank through netbanking portal OR if you get monthly e-statements by your bank in your email (in that case upload all 3 e-statements one by one by choosing ‘add another statement’. In case of password protected PDFs you can specify that."
                        >
                          <Button
                            style={{ marginLeft: 8 }}
                            size="small"
                            type="link"
                            shape="circle"
                          >
                            ?
                          </Button>
                        </Tooltip>
                      </b>
                    </p>
                    <p>{this.renderDates()}</p>
                  </span>
                ) : (
                  <span>
                    <p>
                      Last three ‘3’ months updated{" "}
                      <b>Passbook Photo/Statement Scan</b>
                    </p>
                    <p>{this.renderDates()}</p>
                  </span>
                )}
              </div>
            ) : null}
          </div>
          <div className="action">
            {foundSubTypes ? (
              <Tooltip
                title={
                  files.front || files.back || files.multiples.length > 0
                    ? "Remove existing files first in order to change the value."
                    : "Select Type."
                }
              >
                <Select
                  defaultValue={subTypeMeta ? subTypeMeta.Id : undefined}
                  placeholder="Select Document Type"
                  disabled={
                    files.front || files.back || files.multiples.length > 0
                  }
                  style={{ width: 250 }}
                  onChange={this.onTypeChange}
                >
                  {types.map(type => {
                    return (
                      <Select.Option key={type.Id} value={type.Id}>
                        {type.label}
                      </Select.Option>
                    );
                  })}
                </Select>
              </Tooltip>
            ) : null}
          </div>
        </div>
        <div className="uploading-block">
          {subTypeMeta ? (
            <div style={{ padding: "0 24px" }}>
              {subTypeMeta.Id === 6 ? (
                <Alert
                  showIcon
                  iconType="info-circle"
                  style={{ marginBottom: 16, fontSize: 16 }}
                  message="Note: Please upload digital e-statement as opposed to photos or scans of the statement. Digital Statements allow us to read and process your loan application instantly."
                  type="info"
                />
              ) : (
                <Alert
                  showIcon
                  iconType="info-circle"
                  style={{ marginBottom: 16, fontSize: 16 }}
                  message="Note: Passbook photos and statement scans are difficult for us to process and take anywhere from 7 to 14 days for us to read and process your application. Providing E-Statements is much faster."
                  description=""
                  type="error"
                />
              )}
            </div>
          ) : null}
          <div
            className="upload-form form--two-document"
            style={{
              gridTemplateColumns: "1fr 1fr"
            }}
          >
            {files.multiples.map(file => {
              return (
                <Uploader
                  removeBtn={removeBtn}
                  defaultFile={{
                    name: file.fileName,
                    extra: file.extra
                  }}
                  deleteProps={file.deleteOptions}
                  downloadProps={file.downloadOptions}
                >
                  + Add More Documents (Image/PDF)
                </Uploader>
              );
            })}

            {subTypeMeta ? (
              <div
                style={{
                  display: "flex",
                  padding: 24,
                  borderRadius: 4,
                  flexDirection: "column",
                  border: "1px dashed #ccc"
                }}
              >
                {!this.state.addMore ? (
                  <React.Fragment>
                    <CustomSelect
                      showSearch
                      required
                      name="Bank"
                      label="Select Bank"
                      getFieldDecorator={getFieldDecorator}
                      defaultValue={this.state.bank}
                      onSelect={(value, option) => {
                        this.setState({
                          bank: value,
                          bankName: option.props.valObj.label,
                          password: ""
                        });
                      }}
                      values={Banks}
                      style={{ marginBottom: 8, width: "100%" }}
                      placeholder="Select Bank"
                    />
                    <CustomSelect
                      showSearch
                      required
                      name="AccountType"
                      label="Account Type"
                      getFieldDecorator={getFieldDecorator}
                      defaultValue={this.state.accountType}
                      onSelect={value => {
                        this.setState({
                          accountType: value,
                          password: ""
                        });
                      }}
                      values={[
                        {
                          label: "Saving",
                          value: "SAVING"
                        },
                        {
                          label: "Current",
                          value: "CURRENT"
                        },
                        { label: "Credit Card", value: "CREDIT_CARD" }
                      ]}
                      style={{ marginBottom: 8, width: "100%" }}
                      placeholder="Account Type"
                    />

                    {subTypeMeta.Id === 6 ? (
                      <Input.Password
                        value={this.state.password}
                        onChange={e => {
                          this.setState({ password: e.target.value });
                        }}
                        style={{ marginBottom: 8 }}
                        name="password"
                        placeholder="Document Password (if any)"
                      />
                    ) : null}

                    <Uploader
                      removeBtn={removeBtn}
                      accept={subTypeMeta.Accept || defaultAccept}
                      onFileSelect={callback => {
                        this.props.form.validateFields((err, vals) => {
                          if (err) callback(true);
                          else callback();
                        });
                      }}
                      uploadProps={{
                        url: uploadProps.url,
                        headers: uploadProps.headers,
                        requestType: "POST",
                        queryParams: {
                          ...uploadProps.queryParams,
                          SubType: subTypeMeta.Id,
                          Multiple: true,
                          BankId: this.state.bank,
                          BankName: this.state.bankName,
                          Password: this.state.password,
                          AccountType: this.state.accountType,
                          Order:
                            files.multiples && files.multiples.length > 0
                              ? files.multiples[files.multiples.length - 1]
                                  .Order + 1
                              : 0
                        },
                        inputName: "documentUpload",

                        onComplete: () => {
                          this.setState({ addMore: true });
                          uploadProps.onComplete();
                        }
                      }}
                    >
                      +{" "}
                      {subTypeMeta.Id === 6
                        ? "Upload E-Statement"
                        : "Upload Photo/Scan"}
                    </Uploader>
                  </React.Fragment>
                ) : (
                  <Button
                    type="ghost"
                    onClick={() => {
                      this.setState({ addMore: false });
                    }}
                  >
                    + Upload
                  </Button>
                )}
              </div>
            ) : null}
            {subTypeMeta &&
            subTypeMeta.Id !== 6 &&
            files.multiples.length < 1 ? (
              <div>
                <span style={{ paddingRight: 8 }}>Select Language</span>
                <Radio.Group
                  value={this.state.language}
                  style={{ marginBottom: 8 }}
                  onChange={e => this.setState({ language: e.target.value })}
                >
                  <Radio value="en">English</Radio>
                  <Radio value="hi">Hindi</Radio>
                  <Radio value="kn">Kannada</Radio>
                  <Radio value="te">Telugu</Radio>
                </Radio.Group>
                <iframe
                  width="560"
                  height="315"
                  src={`https://www.youtube.com/embed/F4wI-RDbcc4?cc_load_policy=1&autoplay=1&cc_lang_pref=${this.state.language}`}
                  frameBorder="0"
                  allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
                  allowfullscreen
                />
              </div>
            ) : null}
          </div>
        </div>
      </div>
    );
  }
}

const Wrapped = Form.create()(BankStatement);

export default Wrapped;
